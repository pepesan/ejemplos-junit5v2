package ejercicios.selenium;// Generated by Selenium IDE

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.JavascriptExecutor;

import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class CuentaAbsTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @BeforeEach
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @AfterEach
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void cuentaAbs() {
    // Test name: cuenta-abs
    // Step # | name | target | value
    // 1 | open | https://cursosdedesarrollo.com/pactometro/ | 
    driver.get("https://cursosdedesarrollo.com/pactometro/");
    // 2 | click | id=part-Sumar | 
    driver.findElement(By.id("part-Sumar")).click();
    // 3 | assertNotEditable | id=part-Sumar | 
    {
      WebElement element = driver.findElement(By.id("part-Sumar"));
      Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
      assertFalse(isEditable);
    }
    // 4 | click | id=part-PNV | 
    driver.findElement(By.id("part-PNV")).click();
    // 5 | assertNotEditable | id=part-PNV | 
    {
      WebElement element = driver.findElement(By.id("part-PNV"));
      Boolean isEditable = element.isEnabled() && element.getAttribute("readonly") == null;
      assertFalse(isEditable);
    }
    // 6 | click | css=#abst > .titulo-centrado:nth-child(1) | 
    driver.findElement(By.cssSelector("#abst > .titulo-centrado:nth-child(1)")).click();
    // 7 | assertText | id=num-abst | 36
    assertEquals(driver.findElement(By.id("num-abst")).getText(),"36");
  }
}
